<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<meta http-equiv="Content-Style-Type" content="text/css">

<link rel="STYLESHEET" href="../../styles/carnot.css" charset="ISO-8859-1" type="text/css">
<title>Integrating Plain Java Classes and Session Beans</title>
<script language="JavaScript" src="../../styles/naviLine.js" type="text/javascript"></script>
</head>
<body>
<script language="JavaScript" type="text/javascript">
<!--
	writeNavigation("Integrating JMS","../../toc.html","","mg-integration-6.htm",
		"../handbooks.htm","Developer Handbook",
		"mg-preface.htm","Modeling Guide",
		"PLUGINS_ROOT/org.eclipse.stardust.docs.misc/html/integration/mg-integration-preface.htm","System Integration");
 -->
</script>
<h1>Integrating Plain Java Classes and Session Beans</h1>
<p>Both Plain Java applications and Session Bean applications are designed to
execute Java code:</p>
<ul>
    <li><a href="#plainJava">Plain Java applications</a> allow to instantiate any
     Java class and execute a method on it.</li>
    <li><a href="#session">Session Bean applications</a> allow to create a Session Bean and execute a
    method on it.</li>
</ul>
<p>In both cases this method to be executed is called completion method.</p>
<p>As already explained for Workflow Data, all IN data mappings are executed
before the completion method and all OUT data mappings are executed after the completion
method. For data mappings it is possible to use all getter and setter methods in the sense
of section <a href="data-integration/mg-integration-2.htm">Java Style Data Types</a> on the underlying
object. This object will be the same for the whole life time of activity instance
execution. Especially, it is guaranteed that for a stateful Session Bean application all
data mappings and the completion method will operate on the same Session Bean instance.</p>

<h2 id="plainJava">Plain Java Applications</h2>
<p>Plain Java applications allow to instantiate any Java class with at least one
public constructor and execute a method on it. To achieve this, at modeling time you have
to specify</p>
<ul>
    <li>the Java class,</li>
    <li>a public constructor of the class and</li>
    <li>a public method - the completion method.</li>
</ul>
<p>These settings are accessed in Plain Java application types
in the Process Workbench.</p>
<ul>
    <li><a href="#createJava">Creating a Plain Java Application</a></li>
    <li><a href="#params">Parameters as Access Points</a></li>
    <li><a href="#retryJava">Configuring Retry Mechanism</a></li>
</ul>
<h3 id="createJava">Creating a Plain Java Application</h3>
<p>To specify a plain Java application in the Process
Workbench:</p>
<ol>
    <li>In the diagram toolbar palette select <strong>Applications &gt;
    Plain Java Application</strong></li>
    <li>Open the application properties dialog with a double-click.</li>
    <li>In the details panel, choose the correct values for the implementation
    class, the constructor and the completion method. Note that for accomplishing this
    step it is necessary to have the implementation class in the class path of the Process
    Workbench.</li>
</ol>
<p>Please refer to chapter <a href="mg-defdesk-6.htm">Specifying Applications</a> for
general questions on working with applications in the Process Workbench.</p>
<p class="image"><img src="images/mg-integration-plainjava.png"
    alt="Specifying a Plain Java Application"> <br>
<strong>Figure:</strong> Specifying a Plain Java Application</p>
<p>Detailed information on integrating Java applications can be found
in the <a href="PLUGINS_ROOT/org.eclipse.stardust.docs.misc/html/integration/mg-integration-preface.htm">System Integration</a> part.</p>
<h3 id="params">Parameters as Access Points</h3>
<p>The return value of the completion method, if any, will be exposed as an
OUT access point <tt>returnValue : &lt;type&gt;</tt>.</p>
<p class="image"><img src="images/java-access-point-return.png"
    alt="Access Point return value"> <br>
<strong>Figure:</strong> Return Value Access Point</p>
<p>The constructor and completion method parameters will be exposed 
by the arguments of the methods in the format <tt>&lt;argument&gt; : &lt;type&gt;</tt>.</p>
<p>For example using the following completion method with parameters <tt>arg1</tt> and
<tt>arg2</tt>:</p>
<pre>
public class TestAppl
{

   public TestAppl()
   {
   }
   
   public void notifyCustomer(int arg1, String arg2)
   {
   }
}
</pre>
<p>would result in the provided access points <tt>arg1 : int</tt> and <tt>arg2 : String</tt>.</p>
<p class="image"><img src="images/java-access-point-arg.png"
    alt="Access Point "> <br>
<strong>Figure:</strong> Access Points for completion method</p>

<p>When connecting a data to an application activity, the data mapping is created 
automatically. Please refer to the section 
<a href="mg-defdesk-8.htm#automatic">Automatic Completion of Data Mappings</a> of
the chapter <a href="mg-defdesk-8.htm">Specifying Data Mappings</a> for detailed
information on the preset of parameters for automatic completed data mappings.</p>
<h4>Retrieving access points using annotations</h4>
<p>Stardust provides the following two annotations that can be used to retrieve
access points via parameter names:</p>
<ul>
   <li><strong>&#64;ParameterName</strong> - can be set on the actual parameter (currently only supported in the 
   Stardust Web modeler)</li>
   <li><strong>&#64;ParameterNames</strong> - has as value an array of <strong>&#64;ParameterName</strong>
    and can be set on the method</li>
</ul>
<pre>
@ParameterNames ({@ParameterName("count"), @ParameterName("name"), ...})
public int method(int arg1, String arg2);
</pre>
<p>For example, if you set the following annotations for your completion method:</p>
<pre>
import org.eclipse.stardust.common.annotations.ParameterName;
import org.eclipse.stardust.common.annotations.ParameterNames;

public class TestAppl
{

   public TestAppl()
   {
   }
   
   @ParameterNames({@ParameterName("Element Count"), @ParameterName("Customer Name")})
   public void notifyCustomer(int arg1, String arg2)
   {
   }
}
</pre>
<p>instead of the arguments, you see the annotation settings for ParameterNames in
the list of access points:</p>
<p class="image"><img src="images/java-access-point-name.png"
    alt="Access Points with Annotation Usage"> <br>
<strong>Figure:</strong> Access Points with Annotation Usage</p>
<p>For an application that you like to import in the Web modeler, you can also
use the <strong>&#64;ParameterName</strong> in the parameter list directly, as 
in the following example:</p>
<pre>
import org.eclipse.stardust.common.annotations.ParameterName;

public class TestAppl
{

   public TestAppl()
   {
   }
   
   public void notifyCustomer(@ParameterName("Element Count") int arg1, @ParameterName("Customer Name") String arg2)
   {
   }
}
</pre>
<p>Please note that this usage is not supported in the Eclipse modeler itself yet!</p> 
<h3 id="retryJava">Configuring Retry Mechanism</h3>

<p> The configurable retry mechanism provides 
the facility to retry the operation in case the target service is temporarily unavailable.</p>
<p>For more information, please refer to 
<a href="PLUGINS_ROOT/org.eclipse.stardust.docs.dev/html/concepts/workflow-basics/mg-basics-7.htm#appretry">
Retry Mechanism of Non-interactive Applications 
</a> section of the 
<a href="PLUGINS_ROOT/org.eclipse.stardust.docs.dev/html/concepts/workflow-basics/mg-basics-7.htm">
Applications</a> chapter.</p>

<p>For example, you have added a synchronous application to the model.
In the Property page of the application, you can enable the retry, specify number of retries and time
between retries. However, note that maximum 10 retries and 60 seconds between two retries are allowed. 
So, the application will retry for the defined number of times with a pause of the defined number of seconds, 
until it has success. If the application still fails after the defined number, it will no longer retry.</p>
<p class="image"><img src="images/plainretry.png" alt=""><br></p>

<h2 id="session">Session Bean Applications</h2>
<p>Session Bean applications allow to instantiate a stateful or stateless Session
Bean and execute a method on it. To achieve this, at modeling time you have to specify</p>
<ul>
    <li>the remote interface,</li>
    <li>the home interface,</li>
    <li>the JNDI name,</li>
    <li>a method from the remote interface- the completion method and</li>
    <li>a create method from the home interface.</li>
</ul>
<p>The create method parameters will be exposed as IN access points named <tt>x

InitParam n</tt> where x is the first letter of the class name and n is a consecutive number,
starting with 1.</p>
<p>The completion method parameters will be exposed as IN access points named <tt>x

Param n</tt> where x is the first letter of the class name and n is a consecutive number,
starting with 1. The return value of the completion method, if any, will be exposed as an
OUT access point <tt>returnValue</tt>. Let's consider a Session Bean <tt>ProcessInvoice</tt>
used in a Session Bean application with the following create method and completion method
chosen:</p>
<pre>public interface ProcessInvoiceHome extends EJBHome
{
  ProcessInvoice create (Invoice invoice, java.util.Date receivingDate);
...
public interface ProcessInvoice extends EJBObject
{
  Invoice addItem(InvoiceItem item);</pre>
<p>This will result in the following access points for create method parameters and
completion method parameters:</p>
<ul>
    <li><tt>iInitParam1</tt>, <tt>dInitParam2</tt> for the create method parameters</li>
    <li><tt>iParam1</tt> for the completion method parameter</li>
</ul>
<p>These settings are accessed in Session Bean application types
in the Process Workbench.</p>
<ul>
    <li><a href="#create">Creating a Session Bean Application</a></li>
    <li><a href="#ejb2">EJB 2.x</a></li>
    <li><a href="#ejb3">EJB 3.x</a></li>
    <li><a href="#retrySB">Configuring Retry Mechanism</a></li>
</ul>
<h3 id="create">Creating a Session Bean Application</h3>
<p>To specify a Session Bean application in the Process
Workbench:</p>
<ol>
    <li>In the diagram toolbar palette select <strong>Applications &gt;
    Session Bean Application</strong></li>
    <li>Open the application properties dialog with a double-click.</li>
    <li>Select the EJB mode (<a href="#ejb2">EJB 2.x</a> or <a href="#ejb3">EJB 3.x</a>).</li>
    <li>Enter the properties according to the EJB mode as explained in the following sections.</li>
</ol>
<p>Please refer to the section <a href="PLUGINS_ROOT/org.eclipse.stardust.docs.misc/html/integration/mg-integration-preface.htm">System Integration</a>
for detailed information on integrating session beans.</p>
<h3 id="ejb2">EJB 2.x</h3>
<p>Choose the property values for:</p>
<ul>
    <li>Remote Interface</li>
    <li>Home Interface</li>
    <li>Home Interface JNDI Path</li>
    <li>Completion Method</li>
    <li>Creation Method</li>
</ul>
<p>Note that for accomplishing this step it is necessary to have the home interface
and remote interface classes in the class path of the Process Workbench.</p>
<h4>Local Binding</h4>
<p>To test a local class as a mock Session Bean, check the <strong>Local
Binding</strong> check box. There has to be an implementation of the home interface.</p>
<p class="image"><a href="images/mg-integration-session.png" target="_blank">
<img src="images/mg-integration-session.png" alt="Specifying Session Beans"></a><br>
<strong>Figure:</strong> Specifying EJB 2.x Session Beans</p>
<h3 id="ejb3">EJB 3.x</h3>
<p>The property page for EJB 3.x contains the Eclipse class browser entry Bean Class 
to enter the bean class.</p>
<p>Fill in the values for the following entries:</p>
<ul>
    <li>Session Bean Class</li>
    <li>Business Interface</li>
    <li>JNDI Path</li>
    <li>Initialization Method</li>
    <li>Completion Method</li>
</ul>
<p class="image"><a href="images/integration-session-ejb3_orgSize.png" target="_blank">
<img src="images/integration-session-ejb3.png" alt="Specifying EJB 3.x Session Beans"></a><br>
<strong>Figure:</strong> Specifying EJB 3.x Session Beans</p>
<h4 id="sessionBean">Session Bean Class</h4>
<p>Arbitrary classes can be selected. If the selected class does not satisfy the EJB 3.0 
beans requirements, an error status is displayed.</p>
<!-- TODO insert error status screenshot here -->
<h4 id="bInterface">Business Interface</h4>
<p>A combo box for the Business Interface is provided with:</p>
<ul> 
    <li>all business interfaces as the first tree level 
    (<i>class name</i> + " (" + "local" or "remote" + ")")</li>
    <li>the accessible methods (<i>method name</i> + "(" + <i>parameters</i> + "): " + 
    <i>return value</i>) of these interfaces as the second level.</li>
</ul>
<p>Once an appropriate bean class has been selected, the combo box is populated accordingly,  
applying the rules regarding business interfaces of EJB 3.0 session beans:</p>
<ul>
    <li>If the selected bean class has only one interface, it is considered the business interface.</li>
    <li>If the bean class implements more than one interface, all interfaces annotated by 
    @Remote or @Local are considered business interfaces.</li>
    <li>The following interfaces are excluded when determining whether the bean 
    class has more than one interface:
    <ul>
        <li><tt>java.io.Serializable</tt></li>
        <li><tt>java.io.Externalizable</tt></li>
        <li>any of the interfaces defined by the <tt>javax.ejb</tt> package.</li>
    </ul></li>
    <li>The same business interface cannot be both, a local and a remote business 
    interface of the bean.</li>
</ul>
<p>Instead of entering the business interface via browsing of bean classes, it
can be entered directly or via browsing.</p>
<h4 id="jndi">JNDI Path</h4>
<p>The JNDI path can be entered if it cannot be derived from the bean class properties.</p>
<h4 id="completion">Completion and Initialization Method</h4>
<p>A combo box for the selection of the <strong>Completion Method</strong> is provided as well as
 a combo box for the <strong>Initialization Method</strong>. Both methods will be invoked at runtime.</p>
 
<h3 id="retrySB">Configuring Retry Mechanism</h3>

<p> The configurable retry mechanism provides 
the facility to retry the operation in case the target service is temporarily unavailable.</p>

<p>For more information, please refer to 
<a href="PLUGINS_ROOT/org.eclipse.stardust.docs.dev/html/concepts/workflow-basics/mg-basics-7.htm#appretry">
Retry Mechanism of Non-interactive Applications 
</a> section of the 
<a href="PLUGINS_ROOT/org.eclipse.stardust.docs.dev/html/concepts/workflow-basics/mg-basics-7.htm">
Applications</a> chapter.</p>

<p>For example, you have added an application to the model.
In the Property page of the application, you can enable the retry, specify number of retries and time
between retries. However, note that maximum 10 retries and 60 seconds between two retries are allowed. 
So, the application will retry for the defined number of times with a pause of the defined number of seconds, 
until it has success. If the application still fails after the defined number, it will no longer retry.</p>
 <p class="image"><img src="images/sessionretry.png" alt=""><br>
<script language="JavaScript" type="text/javascript">
<!-- 
writeFooter(); 
-->
</script>
</body>
</html>
